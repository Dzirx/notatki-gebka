// === MODULES/NOTATNIK/STATIC/JS/NOTE-EDIT.JS ===
// Funkcje edycji istniejƒÖcych notatek

console.log('üìù Modu≈Ç note-edit za≈Çadowany');

// ZMIENNE GLOBALNE DLA EDYCJI
window.currentEditNoteId = null;
window.editSelectedTowary = [];
window.editSelectedUslugi = [];
window.editExistingCosts = [];
window.editNoteData = null;
window.editIntegraKosztorysy = [];
// editTowaryData i editUslugiData usuniƒôte - u≈ºywamy wyszukiwarek

// OTWIERANIE MODALA EDYCJI
async function openEditModal(noteId) {
    try {
        // Reset zmiennych
        window.currentEditNoteId = noteId;
        window.editSelectedTowary = [];
        window.editSelectedUslugi = [];
        
        // Poka≈º modal
        document.getElementById('editModal').style.display = 'block';
        const noteIdElement = document.getElementById('editNoteId');
        if (noteIdElement) noteIdElement.textContent = noteId;
        
        // Pobierz szczeg√≥≈Çowe dane notatki
        const noteResponse = await fetch(`/api/notatka-szczegoly/${noteId}`);
        const noteData = await noteResponse.json();
        if (!noteResponse.ok) throw new Error(noteData.detail || 'Nie uda≈Ço siƒô pobraƒá notatki');
        
        window.editNoteData = noteData;
        
        // Wype≈Çnij tre≈õƒá notatki
        const editTresc = document.getElementById('edit_tresc');
        if (editTresc) editTresc.value = noteData.tresc || '';
        
        // Pobierz szczeg√≥≈Çowe dane notatki z pracownikiem (dla wszystkich notatek)
        const detailResponse = await fetch(`/api/notatka/${noteId}`);
        const detailData = await detailResponse.json();
        const editPracownikId = document.getElementById('edit_pracownik_id');
        if (editPracownikId) {
            editPracownikId.value = detailData.pracownik_id || '';
        }
        
        // Poka≈º przycisk importu z integra je≈õli to pojazd
        const editImportSection = document.getElementById('editImportSection');
        if (editImportSection) {
            if (noteData.samochod) {
                editImportSection.style.display = 'block';
            } else {
                editImportSection.style.display = 'none';
            }
        }
        
        // Za≈Çaduj dane towar√≥w i us≈Çug
        await loadEditDropdownData();
        
        // Inicjalizuj upload zone dla za≈ÇƒÖcznik√≥w
        initEditFileUpload();
        
        // Za≈Çaduj istniejƒÖce za≈ÇƒÖczniki
        await loadExistingAttachments(noteId);
        
        // Za≈Çaduj istniejƒÖce kosztorysy
        await loadExistingCosts();
        
        // Za≈Çaduj istniejƒÖce przypomnienia
        await loadExistingReminders(noteId);
        
    } catch (error) {
        console.error('B≈ÇƒÖd otwierania modala:', error);
        alert(`B≈ÇƒÖd pobrania notatki: ${error.message}`);
        closeEditModal();
    }
}

// ≈ÅADOWANIE DANYCH PRACOWNIK√ìW (EDYCJA)
async function loadEditDropdownData() {
    try {
        // Tylko pracownicy - towary i us≈Çugi u≈ºywajƒÖ wyszukiwarek
        const pracownicyResponse = await fetch('/api/pracownicy');
        window.editPracownicyData = await pracownicyResponse.json();
        
        populateEditSelects();
        
    } catch (error) {
        console.error('B≈ÇƒÖd ≈Çadowania danych pracownik√≥w:', error);
    }
}

function populateEditSelects() {
    // editSelectTowar i editSelectUsluga zastƒÖpione wyszukiwarkami
    const pracownikSelect = document.getElementById('edit_pracownik_id');
    
    if (pracownikSelect) {
        // Wype≈Çnij pracownik√≥w (zachowaj current value)
        const currentValue = pracownikSelect.value;
        pracownikSelect.innerHTML = '<option value="">-- Wybierz pracownika --</option>';
        window.editPracownicyData.forEach(pracownik => {
            const selected = pracownik.id == currentValue ? 'selected' : '';
            pracownikSelect.innerHTML += `<option value="${pracownik.id}" ${selected}>${pracownik.pelne_imie}</option>`;
        });
    }
}

// ≈ÅADOWANIE ISTNIEJƒÑCYCH KOSZTORYS√ìW
async function loadExistingCosts() {
    try {
        const response = await fetch(`/api/kosztorysy-notatki/${window.currentEditNoteId}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.detail || 'B≈ÇƒÖd pobierania kosztorys√≥w');
        }
        
        window.editExistingCosts = data.kosztorysy || [];
        renderExistingCosts();
        
    } catch (error) {
        console.error('B≈ÇƒÖd ≈Çadowania kosztorys√≥w:', error);
        showError('editExistingList', 'B≈ÇƒÖd ≈Çadowania kosztorys√≥w');
    }
}

function renderExistingCosts() {
    const container = document.getElementById('editExistingList');
    
    if (!container) return;
    
    if (window.editExistingCosts.length === 0) {
        container.innerHTML = '<p style="color: #6c757d; font-style: italic;">Brak kosztorys√≥w dla tej notatki</p>';
        return;
    }
    
    container.innerHTML = window.editExistingCosts.map(cost => `
        <div class="edit-existing-cost">
            <h5>üí∞ ${cost.numer || 'Brak numeru'} - ${parseFloat(cost.kwota_calkowita).toFixed(2)} z≈Ç</h5>
            <p><strong>Status:</strong> ${cost.status} | <strong>Data:</strong> ${new Date(cost.created_at).toLocaleDateString()}</p>
            ${cost.opis ? `<p><strong>Opis:</strong> ${cost.opis}</p>` : ''}
            
            ${cost.towary && cost.towary.length > 0 ? `
                <p><strong>Towary:</strong> ${cost.towary.map(t => `${t.nazwa} (${t.ilosc}x)`).join(', ')}</p>
            ` : ''}
            
            ${cost.uslugi && cost.uslugi.length > 0 ? `
                <p><strong>Us≈Çugi:</strong> ${cost.uslugi.map(u => `${u.nazwa} (${u.ilosc}x)`).join(', ')}</p>
            ` : ''}
            
            <div class="edit-existing-actions">
                <a href="/notatnik/kosztorys/${window.currentEditNoteId}" class="btn btn-sm btn-info" target="_blank">üëÅÔ∏è Zobacz szczeg√≥≈Çy</a>
                <button type="button" class="btn btn-sm btn-danger" onclick="deleteExistingCost(${cost.id})">üóëÔ∏è Usu≈Ñ</button>
            </div>
        </div>
    `).join('');
}

// DODAWANIE TOWAR√ìW (EDYCJA)
function addTowarToEditCost() {
    const selectedTowarId = document.getElementById('editSelectedTowarId');
    const selectedTowarData = document.getElementById('editSelectedTowarData');
    const iloscInput = document.getElementById('editTowarIlosc');
    const cenaInput = document.getElementById('editTowarCena');
    
    if (!selectedTowarId.value || !iloscInput.value || !cenaInput.value) {
        alert('Wype≈Çnij wszystkie pola (wybierz towar, ilo≈õƒá i cenƒô)');
        return;
    }
    
    const selectedTowar = JSON.parse(selectedTowarData.value);
    if (!selectedTowar) return;
    
    const newItem = {
        id: selectedTowar.id,
        nazwa: selectedTowar.nazwa,
        ilosc: parseFloat(iloscInput.value),
        cena: parseFloat(cenaInput.value),
        isCustom: false
    };
    
    window.editSelectedTowary.push(newItem);
    
    // Reset p√≥l
    document.getElementById('editSearchTowar').value = '';
    selectedTowarId.value = '';
    selectedTowarData.value = '';
    iloscInput.value = '';
    cenaInput.value = '';
    
    renderEditSelectedTowary();
}

function addCustomTowarToEditCost() {
    const nazwaInput = document.getElementById('editCustomTowarNazwa');
    const numerInput = document.getElementById('editCustomTowarNumer');
    const producentInput = document.getElementById('editCustomTowarProducent');
    const rodzajSelect = document.getElementById('editCustomTowarRodzaj');
    const typSelect = document.getElementById('editCustomTowarTyp');
    const indeksInput = document.getElementById('editCustomTowarIndeks');
    const iloscInput = document.getElementById('editCustomTowarIlosc');
    const cenaInput = document.getElementById('editCustomTowarCena');
    
    if (!nazwaInput.value || !iloscInput.value || !cenaInput.value) {
        alert('Wype≈Çnij wszystkie pola obowiƒÖzkowe (nazwa, ilo≈õƒá, cena)');
        return;
    }
    
    const newItem = {
        id: null,
        nazwa: nazwaInput.value,
        numer_katalogowy: numerInput.value || null,
        nazwa_producenta: producentInput.value || null,
        rodzaj_opony: rodzajSelect.value || null,
        typ_opony: typSelect.value || null,
        opona_indeks_nosnosci: indeksInput.value || null,
        ilosc: parseFloat(iloscInput.value),
        cena: parseFloat(cenaInput.value),
        zrodlo: 'local',
        external_id: null,
        isCustom: true
    };
    
    window.editSelectedTowary.push(newItem);
    
    // Reset p√≥l
    nazwaInput.value = '';
    numerInput.value = '';
    producentInput.value = '';
    rodzajSelect.value = '';
    typSelect.value = '';
    indeksInput.value = '';
    iloscInput.value = '';
    cenaInput.value = '';
    
    renderEditSelectedTowary();
}

// DODAWANIE US≈ÅUG (EDYCJA)
function addUslugaToEditCost() {
    const selectedUslugaId = document.getElementById('editSelectedUslugaId');
    const selectedUslugaData = document.getElementById('editSelectedUslugaData');
    const iloscInput = document.getElementById('editUslugaIlosc');
    const cenaInput = document.getElementById('editUslugaCena');
    
    if (!selectedUslugaId.value || !iloscInput.value || !cenaInput.value) {
        alert('Wype≈Çnij wszystkie pola (wybierz us≈Çugƒô, ilo≈õƒá i cenƒô)');
        return;
    }
    
    const selectedUsluga = JSON.parse(selectedUslugaData.value);
    if (!selectedUsluga) return;
    
    const newItem = {
        id: selectedUsluga.id,
        nazwa: selectedUsluga.nazwa,
        ilosc: parseFloat(iloscInput.value),
        cena: parseFloat(cenaInput.value),
        isCustom: false
    };
    
    window.editSelectedUslugi.push(newItem);
    
    // Reset p√≥l
    document.getElementById('editSearchUsluga').value = '';
    selectedUslugaId.value = '';
    selectedUslugaData.value = '';
    iloscInput.value = '';
    cenaInput.value = '';
    
    renderEditSelectedUslugi();
}

function addCustomUslugaToEditCost() {
    const nazwaInput = document.getElementById('editCustomUslugaNazwa');
    const iloscInput = document.getElementById('editCustomUslugaIlosc');
    const cenaInput = document.getElementById('editCustomUslugaCena');
    
    if (!nazwaInput.value || !iloscInput.value || !cenaInput.value) {
        alert('Wype≈Çnij wszystkie pola');
        return;
    }
    
    const newItem = {
        id: null,
        nazwa: nazwaInput.value,
        ilosc: parseFloat(iloscInput.value),
        cena: parseFloat(cenaInput.value),
        zrodlo: 'local',
        external_id: null,
        isCustom: true
    };
    
    window.editSelectedUslugi.push(newItem);
    
    // Reset p√≥l
    nazwaInput.value = '';
    iloscInput.value = '';
    cenaInput.value = '';
    
    renderEditSelectedUslugi();
}

// RENDEROWANIE WYBRANYCH POZYCJI (EDYCJA)
function renderEditSelectedTowary() {
    const container = document.getElementById('editSelectedTowary');
    
    if (!container) return;
    
    if (window.editSelectedTowary.length === 0) {
        container.innerHTML = '<p style="color: #6c757d; font-style: italic;">Brak wybranych towar√≥w</p>';
        updateEditCostSummary();
        return;
    }
    
    container.innerHTML = window.editSelectedTowary.map((item, index) => `
        <div class="edit-cost-item">
            <div class="item-info">
                <strong>${item.nazwa}</strong>${item.numer_katalogowy ? ` <span style="color: #666; font-size: 0.9em;">${item.numer_katalogowy}</span>` : ''}<br>
                <small>Ilo≈õƒá: ${item.ilosc} √ó ${item.cena.toFixed(2)} z≈Ç = <strong>${(item.ilosc * item.cena).toFixed(2)} z≈Ç</strong></small>
            </div>
            <div class="item-actions">
                <button type="button" class="btn btn-sm btn-warning" onclick="editTowarItem(${index})">‚úèÔ∏è</button>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeEditTowar(${index})">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');
    
    updateEditCostSummary();
}

function renderEditSelectedUslugi() {
    const container = document.getElementById('editSelectedUslugi');
    
    if (!container) return;
    
    if (window.editSelectedUslugi.length === 0) {
        container.innerHTML = '<p style="color: #6c757d; font-style: italic;">Brak wybranych us≈Çug</p>';
        updateEditCostSummary();
        return;
    }
    
    container.innerHTML = window.editSelectedUslugi.map((item, index) => `
        <div class="edit-cost-item">
            <div class="item-info">
                <strong>${item.nazwa}</strong><br>
                <small>Ilo≈õƒá: ${item.ilosc} √ó ${item.cena.toFixed(2)} z≈Ç = <strong>${(item.ilosc * item.cena).toFixed(2)} z≈Ç</strong></small>
            </div>
            <div class="item-actions">
                <button type="button" class="btn btn-sm btn-warning" onclick="editUslugaItem(${index})">‚úèÔ∏è</button>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeEditUsluga(${index})">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');
    
    updateEditCostSummary();
}

// USUWANIE POZYCJI (EDYCJA)
function removeEditTowar(index) {
    window.editSelectedTowary.splice(index, 1);
    renderEditSelectedTowary();
}

function removeEditUsluga(index) {
    window.editSelectedUslugi.splice(index, 1);
    renderEditSelectedUslugi();
}

// EDYCJA POZYCJI (EDYCJA)
function editTowarItem(index) {
    const item = window.editSelectedTowary[index];
    const newIlosc = prompt('Nowa ilo≈õƒá:', item.ilosc);
    const newCena = prompt('Nowa cena:', item.cena);
    
    if (newIlosc !== null && newCena !== null && !isNaN(newIlosc) && !isNaN(newCena)) {
        window.editSelectedTowary[index].ilosc = parseFloat(newIlosc);
        window.editSelectedTowary[index].cena = parseFloat(newCena);
        renderEditSelectedTowary();
    }
}

function editUslugaItem(index) {
    const item = window.editSelectedUslugi[index];
    const newIlosc = prompt('Nowa ilo≈õƒá:', item.ilosc);
    const newCena = prompt('Nowa cena:', item.cena);
    
    if (newIlosc !== null && newCena !== null && !isNaN(newIlosc) && !isNaN(newCena)) {
        window.editSelectedUslugi[index].ilosc = parseFloat(newIlosc);
        window.editSelectedUslugi[index].cena = parseFloat(newCena);
        renderEditSelectedUslugi();
    }
}

// OBLICZANIE SUMY (EDYCJA)
function calculateEditCostTotal() {
    let total = 0;
    
    window.editSelectedTowary.forEach(item => {
        total += item.ilosc * item.cena;
    });
    
    window.editSelectedUslugi.forEach(item => {
        total += item.ilosc * item.cena;
    });
    
    return total;
}

function updateEditCostSummary() {
    const total = calculateEditCostTotal();
    const hasItems = window.editSelectedTowary.length > 0 || window.editSelectedUslugi.length > 0;
    
    const summaryDiv = document.getElementById('editNewCostSummary');
    const totalDiv = document.getElementById('editCostTotal');
    
    if (summaryDiv && totalDiv) {
        if (hasItems) {
            summaryDiv.style.display = 'block';
            totalDiv.innerHTML = `≈ÅƒÖczna kwota: <span style="color: #28a745;">${total.toFixed(2)} z≈Ç</span>`;
        } else {
            summaryDiv.style.display = 'none';
        }
    }
}

// ZAPISYWANIE NOWEGO KOSZTORYSU
async function saveNewCostEstimate() {
    const numer = document.getElementById('editNewCostNumber').value.trim();
    const opis = document.getElementById('editNewCostDescription').value.trim();
    
    if (!numer) {
        alert('Podaj numer kosztorysu');
        return;
    }
    
    if (window.editSelectedTowary.length === 0 && window.editSelectedUslugi.length === 0) {
        alert('Dodaj przynajmniej jeden towar lub us≈Çugƒô');
        return;
    }
    
    try {
        const costData = {
            notatka_id: window.currentEditNoteId,
            numer_kosztorysu: numer,
            opis: opis,
            towary: window.editSelectedTowary,
            uslugi: window.editSelectedUslugi
        };
        
        const response = await fetch('/api/kosztorys', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(costData)
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.detail || 'B≈ÇƒÖd zapisywania kosztorysu');
        }
        
        alert('‚úÖ Kosztorys zosta≈Ç zapisany!');
        
        // Reset formularza nowego kosztorysu
        document.getElementById('editNewCostNumber').value = '';
        document.getElementById('editNewCostDescription').value = '';
        window.editSelectedTowary = [];
        window.editSelectedUslugi = [];
        renderEditSelectedTowary();
        renderEditSelectedUslugi();
        
        // Od≈õwie≈º listƒô istniejƒÖcych kosztorys√≥w
        await loadExistingCosts();
        
    } catch (error) {
        console.error('B≈ÇƒÖd zapisywania kosztorysu:', error);
        alert('‚ùå B≈ÇƒÖd: ' + error.message);
    }
}

// USUWANIE ISTNIEJƒÑCEGO KOSZTORYSU
async function deleteExistingCost(costId) {
    if (!confirm('Czy na pewno chcesz usunƒÖƒá ten kosztorys?')) return;
    
    try {
        const response = await fetch(`/api/kosztorys/${costId}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.detail || 'B≈ÇƒÖd usuwania');
        }
        
        alert('‚úÖ Kosztorys zosta≈Ç usuniƒôty!');
        await loadExistingCosts();
        
    } catch (error) {
        console.error('B≈ÇƒÖd usuwania kosztorysu:', error);
        alert('‚ùå B≈ÇƒÖd: ' + error.message);
    }
}

// IMPORT Z INTEGRA (EDYCJA)
async function importFromIntegraEdit() {
    const noteData = window.editNoteData;
    if (!noteData || !noteData.samochod) {
        alert('Ta notatka nie jest przypisana do pojazdu');
        return;
    }
    
    const nrRej = noteData.samochod.nr_rejestracyjny;
    const resultsDiv = document.getElementById('editIntegraResults');
    
    showLoading('editIntegraResults', 'Pobieranie danych z systemu integra...');
    
    try {
        const response = await fetch(`/api/kosztorysy-zewnetrzne/${nrRej}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.detail || 'B≈ÇƒÖd pobierania danych');
        }
        
        if (data.kosztorysy.length === 0) {
            resultsDiv.innerHTML = `<p>‚ùå Brak kosztorys√≥w w systemie integra dla pojazdu ${nrRej}</p>`;
            return;
        }
        
        let html = `
            <h5>üí∞ Dostƒôpne kosztorysy z integra (${data.kosztorysy.length}):</h5>
            <div style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; padding: 10px; background: #f8f9fa;">
        `;
        
        data.kosztorysy.forEach((kosztorys, index) => {
            html += `
                <div style="border: 1px solid #007bff; margin: 10px 0; border-radius: 6px; background: white; box-shadow: 0 2px 4px rgba(0,123,255,0.1);">
                    <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 12px; margin: -1px -1px 15px -1px; border-radius: 5px 5px 0 0;">
                        <label for="edit_integra_${index}" style="cursor: pointer; display: flex; align-items: center; justify-content: space-between; width: 100%; gap: 15px;">
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <input type="checkbox" id="edit_integra_${index}" value="${index}" style="transform: scale(1.2);">
                                <h5 style="margin: 0; font-size: 16px; font-weight: bold;">${kosztorys.numer_kosztorysu}</h5>
                            </div>
                            <div style="font-size: 18px; font-weight: bold; color: #fff3e0;">
                                ${kosztorys.kwota_kosztorysu.toFixed(2)} z≈Ç
                            </div>
                        </label>
                    </div>
                    <div style="padding: 0 15px 15px 15px;">
                            
                            <div style="margin-top: 8px; width: 100%;">
                                <details style="cursor: pointer; width: 100%;">
                                    <summary style="font-weight: bold; color: #495057; padding: 5px; border-radius: 4px; background: #e9ecef;">üìã Pozycje (${kosztorys.towary.length} towar√≥w, ${kosztorys.uslugi.length} us≈Çug)</summary>
                                    <div style="margin-top: 8px; padding: 12px; background: white; border-radius: 4px; border: 1px solid #e9ecef; width: 100%; box-sizing: border-box;">
                                        ${kosztorys.towary.length > 0 ? `
                                            <p style="margin: 0 0 8px 0; font-weight: bold; color: #28a745;">üì¶ Towary:</p>
                                            <ul style="margin: 0 0 12px 20px; padding: 0; font-size: 13px;">
                                                ${kosztorys.towary.map(t => `<li style="margin-bottom: 4px; line-height: 1.4;">${t.nazwa} - ${t.ilosc}x  ${parseFloat(t.cena).toFixed(2)} z≈Ç</li>`).join('')}
                                            </ul>
                                        ` : ''}
                                        ${kosztorys.uslugi.length > 0 ? `
                                            <p style="margin: 0 0 8px 0; font-weight: bold; color: #fd7e14;">üîß Us≈Çugi:</p>
                                            <ul style="margin: 0 0 8px 20px; padding: 0; font-size: 13px;">
                                                ${kosztorys.uslugi.map(u => `<li style="margin-bottom: 4px; line-height: 1.4;">${u.nazwa} - ${u.ilosc}x ${parseFloat(u.cena).toFixed(2)} z≈Ç</li>`).join('')}
                                            </ul>
                                        ` : ''}
                                    </div>
                                </details>
                            </div>
                        </div>
                </div>
            `;
        });
        
        html += `
            </div>
            <button type="button" class="btn btn-success" onclick="importSelectedFromIntegraEdit()" style="margin-top: 10px;">
                üì• Importuj wybrane kosztorysy
            </button>
        `;
        
        resultsDiv.innerHTML = html;
        window.editIntegraKosztorysy = data.kosztorysy;
        
    } catch (error) {
        console.error('B≈ÇƒÖd importu z integra:', error);
        showError('editIntegraResults', error.message);
    }
}

// IMPORT WYBRANYCH KOSZTORYS√ìW Z INTEGRA (EDYCJA)
async function importSelectedFromIntegraEdit() {
    const checkboxes = document.querySelectorAll('#editIntegraResults input[type="checkbox"]:checked');
    
    if (checkboxes.length === 0) {
        alert('Wybierz przynajmniej jeden kosztorys');
        return;
    }
    
    try {
        for (const checkbox of checkboxes) {
            const index = parseInt(checkbox.value);
            const kosztorys = window.editIntegraKosztorysy[index];
            
            const importData = {
                notatka_id: window.currentEditNoteId,
                kosztorys_data: kosztorys
            };
            
            const response = await fetch('/api/importuj-kosztorys', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(importData)
            });
            
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.detail || 'B≈ÇƒÖd importu');
            }
        }
        
        alert('‚úÖ Kosztorysy zosta≈Çy zaimportowane!');
        document.getElementById('editIntegraResults').innerHTML = '';
        await loadExistingCosts();
        
    } catch (error) {
        console.error('B≈ÇƒÖd importu:', error);
        alert('‚ùå B≈ÇƒÖd importu: ' + error.message);
    }
}

// RESET MODALA EDYCJI
function resetEditModal() {
    // Reset wszystkich zmiennych globalnych
    window.currentEditNoteId = null;
    window.editSelectedTowary = [];
    window.editSelectedUslugi = [];
    window.editExistingCosts = [];
    window.editNoteData = null;
    window.editIntegraKosztorysy = [];
    // editTowaryData i editUslugiData ju≈º nie istniejƒÖ
    
    // Reset p√≥l formularza
    const editTresc = document.getElementById('edit_tresc');
    const editNewCostNumber = document.getElementById('editNewCostNumber');
    const editNewCostDescription = document.getElementById('editNewCostDescription');
    
    if (editTresc) editTresc.value = '';
    if (editNewCostNumber) editNewCostNumber.value = '';
    if (editNewCostDescription) editNewCostDescription.value = '';
    
    // Reset p√≥l dodawania w≈Çasnych towar√≥w w edycji
    const editCustomTowarNazwa = document.getElementById('editCustomTowarNazwa');
    const editCustomTowarNumer = document.getElementById('editCustomTowarNumer');
    const editCustomTowarProducent = document.getElementById('editCustomTowarProducent');
    const editCustomTowarRodzaj = document.getElementById('editCustomTowarRodzaj');
    const editCustomTowarTyp = document.getElementById('editCustomTowarTyp');
    const editCustomTowarIndeks = document.getElementById('editCustomTowarIndeks');
    const editCustomTowarIlosc = document.getElementById('editCustomTowarIlosc');
    const editCustomTowarCena = document.getElementById('editCustomTowarCena');
    
    if (editCustomTowarNazwa) editCustomTowarNazwa.value = '';
    if (editCustomTowarNumer) editCustomTowarNumer.value = '';
    if (editCustomTowarProducent) editCustomTowarProducent.value = '';
    if (editCustomTowarRodzaj) editCustomTowarRodzaj.value = '';
    if (editCustomTowarTyp) editCustomTowarTyp.value = '';
    if (editCustomTowarIndeks) editCustomTowarIndeks.value = '';
    if (editCustomTowarIlosc) editCustomTowarIlosc.value = '';
    if (editCustomTowarCena) editCustomTowarCena.value = '';
    
    // Reset wy≈õwietlanych kontener√≥w
    const editSelectedTowary = document.getElementById('editSelectedTowary');
    const editSelectedUslugi = document.getElementById('editSelectedUslugi');
    const editIntegraResults = document.getElementById('editIntegraResults');
    const editNewCostSummary = document.getElementById('editNewCostSummary');
    
    if (editSelectedTowary) editSelectedTowary.innerHTML = '';
    if (editSelectedUslugi) editSelectedUslugi.innerHTML = '';
    if (editIntegraResults) editIntegraResults.innerHTML = '';
    if (editNewCostSummary) editNewCostSummary.style.display = 'none';
}

// OBS≈ÅUGA FORMULARZA EDYCJI TRE≈öCI NOTATKI
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('editForm');
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const id = window.currentEditNoteId;
            if (!id) return alert('Brak ID notatki');

            const tresc = document.getElementById('edit_tresc').value.trim();
            const pracownikSelect = document.getElementById('edit_pracownik_id');
            const pracownik_id = pracownikSelect ? (pracownikSelect.value || null) : null;

            try {
                const res = await fetch(`/api/notatka/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ tresc, pracownik_id }),
                });
                const data = await res.json();
                if (!res.ok) throw new Error(data.detail || 'Nie uda≈Ço siƒô zapisaƒá');

                // Je≈õli sƒÖ pliki do przes≈Çania, prze≈õlij je
                if (window.editPendingFiles && window.editPendingFiles.length > 0) {
                    await uploadEditPendingFiles(id);
                }
                
                alert('‚úÖ Notatka zosta≈Ça zaktualizowana!');
                
                // Zamknij modal i od≈õwie≈º stronƒô
                closeEditModal();
                location.reload();
                
            } catch (e) {
                alert(`B≈ÇƒÖd zapisu: ${e.message}`);
            }
        });
    }
});

// === OBS≈ÅUGA ZA≈ÅƒÑCZNIK√ìW W EDYCJI ===

// Zmienne globalne dla za≈ÇƒÖcznik√≥w w edycji
window.editPendingFiles = [];
window.editUploadedFiles = [];

// Inicjalizacja upload zone dla edycji
function initEditFileUpload() {
    const uploadZone = document.getElementById('editFileUploadZone');
    const fileInput = document.getElementById('editFileInput');
    
    if (!uploadZone || !fileInput) return;
    
    // Klikniƒôcie w upload zone
    uploadZone.addEventListener('click', () => {
        fileInput.click();
    });
    
    // Wyb√≥r plik√≥w przez input
    fileInput.addEventListener('change', (e) => {
        handleEditFiles(e.target.files);
    });
    
    // Drag & Drop
    uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('dragover');
    });
    
    uploadZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
    });
    
    uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
        handleEditFiles(e.dataTransfer.files);
    });
}

function handleEditFiles(files) {
    for (let file of files) {
        if (validateEditFile(file)) {
            addEditFileToList(file);
        }
    }
}

function validateEditFile(file) {
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = [
        'image/jpeg', 'image/png', 'image/gif',
        'application/pdf',
        'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'text/plain', 'text/csv'
    ];
    
    if (file.size > maxSize) {
        alert(`Plik "${file.name}" jest za du≈ºy (max 10MB)`);
        return false;
    }
    
    if (!allowedTypes.includes(file.type)) {
        alert(`Plik "${file.name}" ma nieobs≈Çugiwany format`);
        return false;
    }
    
    return true;
}

function addEditFileToList(file) {
    const fileList = document.getElementById('editFileList');
    const fileId = Date.now() + Math.random();
    
    const fileItem = document.createElement('div');
    fileItem.className = 'file-item';
    fileItem.id = `edit-file-${fileId}`;
    
    fileItem.innerHTML = `
        <div class="file-info">
            <div class="file-icon">${getEditFileIcon(file.type)}</div>
            <div class="file-details">
                <div class="file-name">${file.name}</div>
                <div class="file-size">${formatEditFileSize(file.size)}</div>
            </div>
        </div>
        <div class="file-actions">
            <span class="file-status uploading">Gotowy do wys≈Çania</span>
            <button type="button" class="btn btn-sm btn-danger" onclick="removeEditFile('${fileId}')">üóëÔ∏è</button>
        </div>
    `;
    
    fileList.appendChild(fileItem);
    
    // Dodaj plik do listy oczekujƒÖcych
    window.editPendingFiles.push({
        id: fileId,
        file: file,
        element: fileItem
    });
}

function removeEditFile(fileId) {
    const element = document.getElementById(`edit-file-${fileId}`);
    if (element) {
        element.remove();
    }
    
    // Usu≈Ñ z listy oczekujƒÖcych
    window.editPendingFiles = window.editPendingFiles.filter(f => f.id !== fileId);
}

function getEditFileIcon(mimeType) {
    if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
    if (mimeType === 'application/pdf') return 'üìÑ';
    if (mimeType.includes('word')) return 'üìù';
    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'üìä';
    if (mimeType.startsWith('text/')) return 'üìÉ';
    return 'üìé';
}

function formatEditFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

// Funkcja wywo≈Çywana po aktualizacji notatki - przesy≈Ça pliki
async function uploadEditPendingFiles(noteId) {
    if (window.editPendingFiles.length === 0) return;
    
    for (let pendingFile of window.editPendingFiles) {
        try {
            const statusElement = pendingFile.element.querySelector('.file-status');
            statusElement.textContent = 'Wysy≈Çanie...';
            statusElement.className = 'file-status uploading';
            
            const formData = new FormData();
            formData.append('file', pendingFile.file);
            
            const response = await fetch(`/api/notatka/${noteId}/upload`, {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (response.ok) {
                statusElement.textContent = 'Wys≈Çano';
                statusElement.className = 'file-status uploaded';
            } else {
                throw new Error(result.detail || 'B≈ÇƒÖd wysy≈Çania');
            }
            
        } catch (error) {
            const statusElement = pendingFile.element.querySelector('.file-status');
            statusElement.textContent = 'B≈ÇƒÖd';
            statusElement.className = 'file-status error';
            console.error('B≈ÇƒÖd wysy≈Çania pliku:', error);
        }
    }
    
    // Wyczy≈õƒá listƒô oczekujƒÖcych
    window.editPendingFiles = [];
}

// ≈Åadowanie istniejƒÖcych za≈ÇƒÖcznik√≥w
async function loadExistingAttachments(noteId) {
    try {
        const response = await fetch(`/api/notatka/${noteId}/zalaczniki`);
        const attachments = await response.json();
        
        const container = document.getElementById('editExistingAttachments');
        
        if (attachments.length === 0) {
            container.innerHTML = '<p style="color: #6c757d; font-style: italic;">Brak za≈ÇƒÖcznik√≥w</p>';
            return;
        }
        
        container.innerHTML = attachments.map(att => `
            <div class="existing-attachment">
                <div class="file-info">
                    <div class="file-icon">${getEditFileIcon(att.typ_mime)}</div>
                    <div class="file-details">
                        <div class="file-name">${att.nazwa_pliku}</div>
                        <div class="file-size">${formatEditFileSize(att.rozmiar)}</div>
                    </div>
                </div>
                <div class="file-actions">
                    <a href="/api/zalacznik/${att.id}" class="btn btn-sm btn-primary" download>üì• Pobierz</a>
                    <button type="button" class="btn btn-sm btn-danger" onclick="deleteAttachment(${att.id})">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('B≈ÇƒÖd ≈Çadowania za≈ÇƒÖcznik√≥w:', error);
        const container = document.getElementById('editExistingAttachments');
        container.innerHTML = '<p style="color: #dc3545;">B≈ÇƒÖd ≈Çadowania za≈ÇƒÖcznik√≥w</p>';
    }
}

// Usuwanie istniejƒÖcego za≈ÇƒÖcznika
async function deleteAttachment(attachmentId) {
    if (!confirm('Czy na pewno chcesz usunƒÖƒá ten za≈ÇƒÖcznik?')) return;
    
    try {
        const response = await fetch(`/api/zalacznik/${attachmentId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            // Od≈õwie≈º listƒô za≈ÇƒÖcznik√≥w
            loadExistingAttachments(window.currentEditNoteId);
        } else {
            const result = await response.json();
            alert(`B≈ÇƒÖd usuwania: ${result.detail}`);
        }
    } catch (error) {
        console.error('B≈ÇƒÖd usuwania za≈ÇƒÖcznika:', error);
        alert('B≈ÇƒÖd usuwania za≈ÇƒÖcznika');
    }
}

// === PRZYPOMNIENIA ===

// ≈Åadowanie istniejƒÖcych przypomnie≈Ñ
async function loadExistingReminders(noteId) {
    try {
        const response = await fetch(`/api/notatka/${noteId}/przypomnienia`);
        const reminders = await response.json();
        
        const container = document.getElementById('editExistingReminders');
        
        if (reminders.length === 0) {
            container.innerHTML = '<p style="color: #6c757d; font-style: italic;">Brak przypomnie≈Ñ</p>';
            return;
        }
        
        container.innerHTML = reminders.map(reminder => {
            const date = new Date(reminder.data_przypomnienia);
            const formattedDate = date.toLocaleString('pl-PL');
            const statusText = reminder.wyslane ? 'Wys≈Çane' : 'Oczekuje';
            const statusClass = reminder.wyslane ? 'text-success' : 'text-warning';
            
            return `
                <div class="existing-reminder" style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 10px; margin-bottom: 8px; display: flex; justify-content: space-between; align-items: center;">
                    <div class="reminder-info">
                        <div class="reminder-date" style="font-weight: 500;">‚è∞ ${formattedDate}</div>
                        <div class="reminder-status ${statusClass}" style="font-size: 12px;">${statusText}</div>
                    </div>
                    <div class="reminder-actions">
                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteReminder(${reminder.id})">üóëÔ∏è</button>
                    </div>
                </div>
            `;
        }).join('');
        
    } catch (error) {
        console.error('B≈ÇƒÖd ≈Çadowania przypomnie≈Ñ:', error);
        const container = document.getElementById('editExistingReminders');
        container.innerHTML = '<p style="color: #dc3545;">B≈ÇƒÖd ≈Çadowania przypomnie≈Ñ</p>';
    }
}

// Dodawanie nowego przypomnienia
async function addReminder() {
    const noteId = window.currentEditNoteId;
    if (!noteId) {
        alert('B≈ÇƒÖd: brak ID notatki');
        return;
    }
    
    const dateInput = document.getElementById('edit_data_przypomnienia');
    const dateValue = dateInput.value;
    
    if (!dateValue) {
        alert('Proszƒô wybraƒá datƒô przypomnienia');
        return;
    }
    
    try {
        const response = await fetch(`/api/notatka/${noteId}/przypomnienie`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                data_przypomnienia: dateValue
            })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            showToast('Przypomnienie zosta≈Ço dodane', 'success');
            dateInput.value = '';
            await loadExistingReminders(noteId);

        } else {
            showToast(result.detail || 'B≈ÇƒÖd dodawania przypomnienia', 'error');
        }
        
    } catch (error) {
        console.error('B≈ÇƒÖd dodawania przypomnienia:', error);
        showToast('B≈ÇƒÖd dodawania przypomnienia', 'error');
    }
}

// Usuwanie przypomnienia
async function deleteReminder(reminderId) {
    if (!confirm('Czy na pewno chcesz usunƒÖƒá to przypomnienie?')) return;
    
    try {
        const response = await fetch(`/api/przypomnienie/${reminderId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            showToast('Przypomnienie zosta≈Ço usuniƒôte', 'success');
            await loadExistingReminders(window.currentEditNoteId);
        } else {
            const result = await response.json();
            showToast(result.detail || 'B≈ÇƒÖd usuwania przypomnienia', 'error');
        }
        
    } catch (error) {
        console.error('B≈ÇƒÖd usuwania przypomnienia:', error);
        showToast('B≈ÇƒÖd usuwania przypomnienia', 'error');
    }
}

console.log('‚úÖ note-edit.js za≈Çadowany');